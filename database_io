# Read File: 
Python readline() and readlines() | File Handling Python | Edureka 
f = open("C:\\Users\Dao\Desktop\python_test.txt", 'r') 
print(f.read(5)) 
f.close() 

f = open("C:\\Users\Dao\Desktop\python_test.txt", 'r') 
f.readline() 
f.readline() 
f.close() 

f = open("C:\\Users\Dao\Desktop\python_test.txt", 'r') 
for x in f: 
  print(x) 
f.close() 

f = open("C:\\Users\Dao\Desktop\python_test.txt", "a") 
f.write("Now the file has more content!") 
f.close() 

f = open("C:\\Users\Dao\Desktop\python_test.txt", "w") 
f.write("Now the file has more content!") 
f.close() 


# Delete files and folders: 

 

import os 
if os.path.exists("C:\\Users\Dao\Desktop\python_test.txt"): 
  os.remove("C:\\Users\Dao\Desktop\python_test.txt") 
else: 
  print("The file does not exist") 

import os 
os.rmdir("myfolder") 


# To open an extremely large file: 

# [Python] How to Avoid Memory Error when using open() to open a large file - Clay-Technology World (clay-atlas.com) 

with open('path', 'r', encoding='utf-8') as f: 
for line in f:
  print(line) 

 

with open('text.txt', 'r', encoding='utf-8') as f: 
for chunk in iter(lambda: f.read(1024), ''): 
  print(chunk) 

 

# Read an extremely large file and write it to disk: 
# python - Process very large (>20GB) text file line by line - Stack Overflow 

def ProcessLargeTextFile(): 
    bunchsize = 1000000     # Experiment with different sizes 
    bunch = [] 
    with open("filepath", "r") as r, open("outfilepath", "w") as w: 
    for line in r: 
    x, y, z, rest = line.split(' ', 3) 
    bunch.append(' '.join((x[:-3], y[:-3], z[:-3], rest))) 
      if len(bunch) == bunchsize: 
        w.writelines(bunch) 
        bunch = [] 
        w.writelines(bunch) 


# Sqlite: 

import sqlite3  
con = sqlite3.connect('example.db') 
cur = con.cursor()  
# Create table  
cur.execute('''CREATE TABLE stocks (date text, trans text, symbol text, qty real, price real)''')  
# Insert a row of data  
cur.execute("INSERT INTO stocks VALUES ('2006-01-05','BUY','RHAT',100,35.14)")  
# Save (commit) the changes  
con.commit()  


# We can also close the connection if we are done with it. # Just be sure any changes have been committed or they will be lost.  
con.close() 
for row in cur.execute('SELECT * FROM stocks ORDER BY price'): 
    print(row) 

# SQL Place Holder: 

import sqlite3  
con = sqlite3.connect(":memory:")  
cur = con.cursor()  
cur.execute("create table lang (name, first_appeared)") # This is the qmark style:  
cur.execute("insert into lang values (?, ?)", ("C", 1972)) # The qmark style used with executemany():  
lang_list = [ ("Fortran", 1957), ("Python", 1991), ("Go", 2009), ]  
cur.executemany("insert into lang values (?, ?)", lang_list) # And this is the named style:  
cur.execute("select * from lang where first_appeared=:year", {"year": 1972})  
print(cur.fetchall())  
con.close() 






import wmi
import win32api
import win32net

ip = "10.50.0.178"
username = "vmadministrator"
password = "_Sp0bcf0e565ed348414"
from socket import *
connection = wmi.WMI(ip, user=username, password=password)
